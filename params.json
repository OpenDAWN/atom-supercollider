{"name":"Atom-supercollider","tagline":"SuperCollider development environment for Atom.io","body":"# SuperCollider for Atom\r\n\r\nA SuperCollider development environment for Atom.io\r\n\r\n---\r\n\r\nSuperCollider is a programming language for real time audio synthesis and algorithmic composition.\r\n\r\nhttps://supercollider.github.io\r\n\r\n---\r\n\r\n1. SuperCollider comes with a cross platform **IDE** (OS X/Linux/Windows) which communicates with the language interpreter.\r\n\r\n2. The language interpreter runs in a separate process (**sclang**) and includes comprehensive bindings for making Qt based GUIs. sclang compiles and executes SuperCollider code, manages event schedulers (for making music) and creates GUIs. It can also send and receive OSC (Open Sound Control) and MIDI.\r\n\r\n3. The SuperCollider synthesis server (**scsynth**) runs in a separate process or even on a separate machine so it is ideal for realtime networked music. It just makes music, its quite efficient and the audio quality is very high. Communication between sclang and scsynth is via OSC (Open Sound Control).\r\n\r\nSuperCollider Atom is an alternative to the IDE. Atom is free, open source and very hackable.\r\n\r\n\r\n## Features\r\n\r\n### Lookup classes and methods using shift-cmd-R\r\n\r\n<img src=\"https://raw.githubusercontent.com/crucialfelix/atom-supercollider/master/docs/images/lookup-classes-methods.png\" style=\"max-width: 500px; margin:auto; display: block;\" />\r\n\r\n### Clear readable call stacks for errors\r\n\r\nClicking on one of the debug frames will open the source code in the left pane.\r\n\r\n<img src=\"https://raw.githubusercontent.com/crucialfelix/atom-supercollider/master/docs/images/callstack.png\" />\r\n\r\n#### Click to see contents of objects in Args or Vars\r\n\r\n<img src=\"https://raw.githubusercontent.com/crucialfelix/atom-supercollider/master/docs/images/sc-atom-fold-out.gif\" />\r\n\r\n### Syntax errors in your code are highlighted\r\n\r\n<img src=\"https://raw.githubusercontent.com/crucialfelix/atom-supercollider/master/docs/images/scatom-syntax-error.png\" />\r\n\r\n\r\n### System/Growl notifications on error\r\n\r\n<img src=\"https://raw.githubusercontent.com/crucialfelix/atom-supercollider/master/docs/images/growl-notification.png\" style=\"width: auto; max-width: 400px;\" />\r\n\r\nVery useful if you are busy making music in another window and want to know why the music just stopped.\r\n\r\nUses system notification on OS X 10.8+  Earlier OS X versions, Linux and Windows can install Growl:\r\n\r\nhttps://github.com/visionmedia/node-growl\r\n\r\n### REPL\r\n### SuperCollider's full Qt GUI\r\n### Open help files by right-clicking on the class/method name\r\n\r\n\r\n---\r\n\r\n\r\n### Installation\r\n\r\n##### 1. Install this package:\r\n\r\nusing Atom's 'Install Packages', search for \"supercollider\"\r\n\r\n##### 2. Download and install SuperCollider:\r\n\r\nhttps://supercollider.github.io\r\n\r\n##### 3. It should work\r\n\r\nIf you've installed SuperCollider in a non-standard place or have a development build, then create a .supercollider.yaml file to specify the path where sclang can be found.\r\n\r\nSee \"Preferences\" below.\r\n\r\n##### 4. Open an .scd file in an Atom project, and then open a post window (shift-cmd-k)\r\n\r\n---\r\n\r\n### REPL\r\n\r\n| key              | command                                         |\r\n| ---------------- | ----------------------------------------------- |\r\n| `shift-cmd-K`    | Compile library (open window if needed)         |\r\n| `shift-enter`    | Evaluate selection or current line              |\r\n| `shift-cmd-C`    | Clear post window                               |\r\n| `cmd-.`          | Panic ! Stop all music                          |\r\n\r\n\r\nYou may customize these in your own Keymap file.\r\n\r\n\r\n### Lookup classes and methods with `shift-cmd-r`\r\n\r\nLookup is done using Atom's Symbol View which is powered by the venerable ctags.\r\nIts quite fast and uses fuzzy finder. All sc classes and methods are tagged.\r\n\r\nInstall ctags if you need to:\r\n\r\nos x\r\n\r\n    brew install ctags\r\n\r\nubuntu\r\n\r\n    sudo apt-get install exuberant-ctags\r\n\r\nwindows\r\n\r\n    http://ctags.sourceforge.net/\r\n\r\n\r\nAdd support for the supercollider language by making a file called ~/.ctags\r\n\r\n    --langdef=supercollider\r\n    --langmap=supercollider:.sc\r\n    --regex-supercollider=/^([A-Z]{1}[a-zA-Z0-9_]*) /\\1/c,class/\r\n    --regex-supercollider=/^[[:space:]]*(\\*[a-z]{1}[a-zA-Z0-9_]*) \\{/\\1/m,method/\r\n    --regex-supercollider=/^[[:space:]]*([a-z]{1}[a-zA-Z0-9_]*) \\{/\\1/m,method/\r\n\r\n- Symlink quarks and the SCClassLibrary into your project directory\r\n- Install `symbol-gen` package\r\n- Regenerate tags with `cmd-alt-g` or \"Symbol Gen: Generate\"\r\n- `shift-cmd-r` will now be able to find all classes and methods\r\n- Select a classname, `alt-cmd-down_arrow` to go to the definition\r\n\r\nBest practice is to symlink the Extensions and SCClassLibrary into your current project directory. Then all Classes will be indexed and easy to look up.\r\nI might find a way to pass the class paths to ctags later.\r\n\r\nThere is also a package called 'goto' that uses the language grammar to generate symbols rather than ctags.  If you do a lot of non-class development then this might be a useful approach. I find it tags too much junk, and I like having just classes and methods in my tags file.\r\n\r\n### GUI\r\n\r\nSuperCollider has a comprehensive Qt based gui toolkit.  GUIs in SuperCollider Atom work just as they do with the SCIDE, they run in the separate language process:\r\n\r\n    Server.default.makeWindow\r\n\r\n### Help files:\r\n\r\ncmd-shift-p  and type \"open help file...\"\r\n\r\nOr use the context menu (right-click) on the class name or method name to lookup.\r\n\r\nThe help browser will open in a new window.\r\n\r\n\r\n(TODO: open help files directly in Atom)\r\n\r\n## Preferences\r\n\r\nConfiguration files are managed by supercollider.js and are documented here:\r\n\r\nhttp://supercolliderjs.readthedocs.org/en/latest/configuration.html\r\n\r\ntldr: You create a .supercollider.yaml in your working directory or your home directory\r\nand specify paths to sclang and scsynth\r\n\r\n##### Default paths:\r\n\r\n**OS X**\r\n\r\n`\"/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sclang\"`\r\n\r\n**Linux**\r\n\r\n`\"/usr/local/bin/sclang\"`\r\n\r\n**Windows**\r\n\r\n`\"C:\\Program Files\\SuperCollider\\sclang.exe\"`\r\n\r\n\r\n## Missing Features\r\n\r\n#### Built in server window\r\n\r\n    s = Server.default;\r\n\r\n    // but its easy to make a server window\r\n    s.makeWindow\r\n\r\n\r\n#### Native Auto-complete\r\n\r\nThere are many Atom packages for auto-complete. However they use text matching and not direct introspection.\r\nIt would be possible to dump the class/method interface to a JSON file and then load that into auto-complete-plus.\r\nThis would provide pretty good auto-complete with argument names and everything.\r\n","google":"UA-154147-9","note":"Don't delete this file! It's used internally to help with page regeneration."}